#!/bin/bash
# Script written by lau dot hub at gmail dot com


#Default configuration. May be overwritten by configuration file wpautobackup.conf

#Default backup directory
BACKUP_DIR=$HOME/wpBackup

#Replace this with gzip if you have large database that make compression too long
ZIP_TOOL=/bin/bzip2
ZIP_SUFFIX=bz2

#The default program paths
GREP=/bin/grep
AWK=/usr/bin/awk
MYSQLDUMP=/usr/bin/mysqldump
ECHO=/bin/echo
GETOPT=/usr/bin/getopt
MKDIR=/bin/mkdir
TEE=/usr/bin/tee

TAR=/bin/tar

POST_DUMP_OPERATION=""

#The base directory
WWW_DIR=/var/www

#The log file is there
AUTOBACKUP_CONF_FOLDER=$HOME/.wpautobackup

#If it exists, load the configuration file
if [[ -f $AUTOBACKUP_CONF_FOLDER/wpautobackup.conf ]]; then
	. $AUTOBACKUP_CONF_FOLDER/wpautobackup.conf
fi

#Function to echo log messages
function LOG_FUNCTION {
	$ECHO $*
}
#Function do discard log messages
function DISCARD_FUNCTION {
	#Does nothing
	NOTHING_TO_DO=""
}

#The default LOG function
LOG="LOG_FUNCTION"
#The default ACTION_TO_DO function
ACTION_TO_DO="backup_directory"

CONTENT_BACKUP="do_not_backup_content"

#Here we add some options to allow to display only (without performing backup)
#the directories where a wordpress site is installed.
OPTS=`getopt -o dc -l display,content,dry-run -- "$@"`
if [ $? != 0 ]
then
    exit 1
fi

DRY_RUN="false"

eval set -- "$OPTS"

while true ; do
    case "$1" in
    	#Here we change the action to do in order to make backup of wp-content
        -c) CONTENT_BACKUP="backup_content"
        	$LOG "Will backup content"
        	;;
        --content)
        	$LOG "Will backup content"
        	CONTENT_BACKUP="backup_content"
        	;;
        #For testing purpose, to avoid that a database is dumped
        --dry-run)
        	$LOG "Dry run"
        	DRY_RUN="true"
        	;;
    	#Here we change the action to do in order to make it only display
    	#and discard any logs
        -d) LOG="DISCARD_FUNCTION"
			ACTION_TO_DO="display_directory"
        	;;
        --display)
        	LOG="DISCARD_FUNCTION"
        	ACTION_TO_DO="display_directory"
        	;;
        --) break ;;
    esac
    shift
done




#Create directories
$MKDIR -p $AUTOBACKUP_CONF_FOLDER
$MKDIR -p $BACKUP_DIR

#The date of the current backup. Will be the same for all backups,
#but may differ from the real dump date.
CURRENT_DATE=$(date +%Y%m%d%H%M%S)

#The log file:
LOGFILE=$AUTOBACKUP_CONF_FOLDER/wpautobackup.log

#Redirect to the log file and to the default ouptut
exec > >($TEE --append $LOGFILE)
	
# Without this, only stdout would be captured - i.e. your
# log file would not contain any error messages.
# SEE answer by Adam Spiers, which keeps STDERR a seperate stream -
# I did not want to steal from him by simply adding his answer to mine.
exec 2>&1

#The wp-config.php's name constant
typeset -r WPCONFIG_FILE="wp-config.php"

#This function process the www directory where all the wordpress sites should
#be present.
#Arguments:
# $1 the base path of the process
# $2 the action to be executed (backup_directory or display_directory)
function process_www_directory {
	typeset base_path=$1
	typeset action=$2
	
	typeset item
	typeset i
    for i in $(ls $base_path)
    do
        item=$base_path/$i
        
        $LOG "---------> Processing $item"
        
        # If the current file is a directory, 
        # process the directory:
        if [[ -d $item ]]; then
        	#Do it using the process function:
        	processDirectory $item $action
        fi
        $LOG done for $item
    done
	exit 0
}

#This function will check if there is a wp-config.php file into the given directory
#Arguments:
# $1 the directory
# $2 the action to be executed (backup_directory or display_directory)
function processDirectory {
	typeset directory=$1
	typeset action=$2
	typeset configFile=$directory/$WPCONFIG_FILE
	
	#Checks if the wp-config.php file exists
	if [[ -f $configFile ]]; then
		$action $directory $configFile
	else
		#Else, there is nothing to be done
		$LOG Nothing to do for $directory
	fi
	return 0
}

#Only display the name of the directory
#Arguments:
#	the directory path
#	the wp-config.php file path
function display_directory {
	typeset directory=$1
	typeset configFile=$2
	directory_name=$(basename $directory)
	#Does nothing except display
	$ECHO $directory_name
}


#Do the backup of the given directory
#Arguments:
#	the directory path
#	the wp-config.php file path
function backup_directory {
	typeset directory=$1
	typeset configFile=$2
	
	#So we have something to do here:
	$LOG Preparing backup of $directory
	
	#Retrieve the values from the config file:
	DB_NAME=$(getValueFromWPConfig DB_NAME $configFile)
	if [[ $? != "0" ]]; then
		#It is an error, we should stop
		return 1
	fi
	DB_HOST=$(getValueFromWPConfig DB_HOST $configFile)
	if [[ $? != "0" ]]; then
		#It is an error, we should stop
		return 1
	fi
	DB_USER=$(getValueFromWPConfig DB_USER $configFile)
	if [[ $? != "0" ]]; then
		#It is an error, we should stop
		return 1
	fi
	DB_PASSWORD=$(getValueFromWPConfig DB_PASSWORD $configFile)
	if [[ $? != "0" ]]; then
		#It is an error, we should stop
		return 1
	fi
	
	#Do some logging to indicate what is done
	$LOG DB_NAME=$DB_NAME
	$LOG DB_HOST=$DB_HOST
	$LOG DB_USER=$DB_USER
	$LOG DB_PASSWORD=$DB_PASSWORD
	
	mysql_hostname_option="--host=$DB_HOST"
	
	#If we have a database that is on localhost:
	if [[ "$DB_HOST" = "localhost" || "$DB_HOST" = "127.0.0.1" ]]; then
		mysql_hostname_option=""
	fi
	
	
	directory_name=$(basename $directory)
	
	$LOG "---------> MySQL dump of $directory_name"
	
	#the output filename
	output_dump=$BACKUP_DIR/$directory_name-$CURRENT_DATE.sql.$ZIP_SUFFIX
	
	#Let us do the backup:
	$LOG "$MYSQLDUMP --opt -Q $mysql_hostname_option -u $DB_USER --password=$DB_PASSWORD $DB_NAME | $ZIP_TOOL > $output_dump"
	#If we are not running dry:
	if [[ $DRY_RUN = "false" ]] ; then
		$MYSQLDUMP --opt -Q $mysql_hostname_option -u $DB_USER --password=$DB_PASSWORD $DB_NAME | $ZIP_TOOL > $output_dump
		return_code=$?
		if [[ $return_code != "0" ]]; then
			#It is an error, we should stop
			$LOG "ERROR: mysqldump exited with error code $return_code"
			return $return_code
		fi
		
		#We may now want to do something with the output file
		#If the POST_DUMP_OPERATION is an executable file, we just call it
		#POST_DUMP_OPERATION should be defined into the configuration file
		if [[ -x $POST_DUMP_OPERATION ]]; then
			$LOG "Calling external file to finish backup process of mysql dump"
			$POST_DUMP_OPERATION $output_dump
		fi
	fi
	
	#Performs the backup (or do not backup) action:
	$CONTENT_BACKUP $directory
	
	#Preparation of next thing to do: remove old backups:
	#find ~/wpBackup/ -ctime +30 -exec rm {} \; #Do not forget to put variables
	
}

#Do the backup of the wp-content and wp-config.php of the given directory
#Arguments:
#	the directory path
function backup_content {
	typeset directory=$1
	typeset directory_name=$(basename $directory)
	#Does nothing
	wp_content_name=wp-content
	$LOG "---------> Backup of $directory's content"
	
	output_file=$BACKUP_DIR/$directory_name-$CURRENT_DATE.tar.$ZIP_SUFFIX
		
	#Let us do the backup:
	$LOG "$TAR cf - -C $directory $wp_content_name $WPCONFIG_FILE  | $ZIP_TOOL > $output_file"
	#If we are not running dry:
	if [[ $DRY_RUN = "false" ]] ; then
		#Do the tar by changing first to the directory path:
		$TAR cf - -C $directory $wp_content_name $WPCONFIG_FILE  | $ZIP_TOOL > $output_file
		return_code=$?
		if [[ $return_code != "0" ]]; then
			#It is an error, we should stop
			$LOG "ERROR: tar+zip exited with error code $return_code"
			return $return_code
		fi
		if [[ -x $POST_DUMP_OPERATION ]]; then
			$LOG "Calling external file to finish backup process of wp-content"
			$POST_DUMP_OPERATION $output_file
		fi
	fi
}

function do_not_backup_content {
	#Does nothing
	$LOG "Nothing to do for $directory"
}

#Do a grep and awk to retrieve the valueName from the wp-config.php file
#Arguments:
#	the value name to read from the wp-config.php file (DB_USER, DB_HOST, DB_NAME, DB_PASSWORD)
#	the filepath of the wp-config.php file
function getValueFromWPConfig {
	typeset valueName=$1
	typeset filepath=$2
	
	#A small grep + awk to get the value:
	the_value=$($GREP $valueName $filepath | $AWK -F"'" '{print $4}')
	#Check the return value
	if [[ $? != "0" ]]; then
		#It is an error, we should warn the user
		$LOG "ERROR: could not retrieve the value $valueName from $filepath"
		return 1
	else
		$ECHO $the_value
		return 0
	fi
}

#Now we run the process and give the action to do
process_www_directory $WWW_DIR $ACTION_TO_DO

exit 0

